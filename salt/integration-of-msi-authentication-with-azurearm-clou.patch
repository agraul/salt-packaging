From 150dded2c5b6cd508f7fa0388ecec60c18d5220b Mon Sep 17 00:00:00 2001
From: ed lane <ed.lane.0@gmail.com>
Date: Thu, 30 Aug 2018 06:07:08 -0600
Subject: [PATCH] Integration of MSI authentication with azurearm cloud
 driver (#105)

---
 salt/cloud/clouds/azurearm.py | 76 ++++++++++++++++++++++++++++-------
 1 file changed, 62 insertions(+), 14 deletions(-)

diff --git a/salt/cloud/clouds/azurearm.py b/salt/cloud/clouds/azurearm.py
index 1b5383d059..b85265844f 100644
--- a/salt/cloud/clouds/azurearm.py
+++ b/salt/cloud/clouds/azurearm.py
@@ -58,6 +58,9 @@ The Azure ARM cloud module is used to control access to Microsoft Azure Resource
       virtual machine type will be "Windows". Only set this parameter on profiles which install Windows operating systems.
 
 
+    if using MSI-style authentication:
+    * ``subscription_id``
+
 Example ``/etc/salt/cloud.providers`` or
 ``/etc/salt/cloud.providers.d/azure.conf`` configuration:
 
@@ -82,8 +85,11 @@ Example ``/etc/salt/cloud.providers`` or
       For example, this creates a service principal with 'owner' role for the whole subscription:
       az ad sp create-for-rbac -n "http://mysaltapp" --role owner --scopes /subscriptions/3287abc8-f98a-c678-3bde-326766fd3617
 
-      *Note: review the details of Service Principals. Owner role is more than you normally need, and you can restrict
-      scope to a resource group or individual resources.
+      *Note: review the details of Service Principals. Owner role is more than you normally need, and you can restrict scope to a resource group or individual resources.
+
+    Or my-azure-config with MSI-style authentication:
+      driver: azure
+      subscription_id: 3287abc8-f98a-c678-3bde-326766fd3617
 '''
 
 
@@ -122,6 +128,30 @@ try:
     import azure.mgmt.compute.models as compute_models
     import azure.mgmt.network.models as network_models
     from azure.storage.blob.blockblobservice import BlockBlobService
+    from azure.common.credentials import (
+        UserPassCredentials,
+    )
+    from msrestazure.azure_active_directory import MSIAuthentication
+    from azure.mgmt.compute.models import (
+        CachingTypes,
+        DataDisk,
+        DiskCreateOptionTypes,
+        HardwareProfile,
+        ImageReference,
+        NetworkInterfaceReference,
+        NetworkProfile,
+        OSDisk,
+        OSProfile,
+        StorageProfile,
+        VirtualHardDisk,
+        VirtualMachine,
+        VirtualMachineSizeTypes,
+    )
+    from azure.mgmt.network.models import (
+        IPAllocationMethod,
+        NetworkInterface,
+        PublicIPAddress,
+    )
     from msrestazure.azure_exceptions import CloudError
     HAS_LIBS = True
 except ImportError:
@@ -248,19 +278,30 @@ def get_configured_provider():
                 return provider_details
         return False
 
+    # check if using Service Principle style authentication...
     provider = __is_provider_configured(
         __opts__,
         __active_provider_name__ or __virtualname__,
-        ('subscription_id', 'tenant', 'client_id', 'secret')
-    )
-
+        required_keys=('subscription_id', 'tenant', 'client_id', 'secret'),
+        log_message=False  #... allowed to fail so no need to log warnings
+        )
     if provider is False:
-        provider = __is_provider_configured(
+        # check if using username/password style authentication...
+    	provider = __is_provider_configured(
             __opts__,
             __active_provider_name__ or __virtualname__,
-            ('subscription_id', 'username', 'password')
+            required_keys=('subscription_id', 'username', 'password'),
+            log_message=False
         )
 
+    if provider is False:
+        # check if using MSI style credentials...
+    	provider = __is_provider_configured(
+            __opts__,
+            __active_provider_name__ or __virtualname__,
+            required_keys=('subscription_id',),
+            log_message=False
+        )
     return provider
 
 
@@ -301,6 +342,7 @@ def get_conn(client_type):
     )
 
     if tenant is not None:
+        # using Service Principle style authentication...
         client_id = config.get_cloud_config_value(
             'client_id',
             get_configured_provider(), __opts__, search_global=False
@@ -316,14 +358,20 @@ def get_conn(client_type):
             'username',
             get_configured_provider(), __opts__, search_global=False
         )
-        password = config.get_cloud_config_value(
-            'password',
-            get_configured_provider(), __opts__, search_global=False
-        )
-        conn_kwargs.update({'username': username, 'password': password})
+        if username is not None:
+            # using username/password style authentication...
+            password = config.get_cloud_config_value(
+                'password',
+                get_configured_provider(), __opts__, search_global=False
+            )
+            credentials = UserPassCredentials(username, password)
+        else:
+            # using MSI style authentication ...
+            credentials = MSIAuthentication()
 
-    client = __utils__['azurearm.get_client'](
-        client_type=client_type, **conn_kwargs
+    client = Client(
+        credentials=credentials,
+        subscription_id=str(subscription_id),
     )
 
     return client
-- 
2.17.1


