From 49d7bbff99965e7c84b902606036580bd88630dd Mon Sep 17 00:00:00 2001
From: Bo Maryniuk <bo@suse.de>
Date: Mon, 15 Oct 2018 17:26:16 +0200
Subject: [PATCH] Preserving signature in "module.run" state (U#50049)

Add unit test for _call_function on signature aligning named arguments

Add unit test for _call_function routine for unnamed positional arguments

Remove redundant docstrings

Add different test function signature with the same outcome

Replace standalone function with lambda-proxy for signatures only
---
 salt/states/module.py            | 46 +++++++++++++++++++++++++++++++++++++---
 tests/unit/states/test_module.py | 40 +++++++++-------------------------
 2 files changed, 53 insertions(+), 33 deletions(-)

diff --git a/salt/states/module.py b/salt/states/module.py
index 285108a00a..ebbf3da679 100644
--- a/salt/states/module.py
+++ b/salt/states/module.py
@@ -445,9 +445,49 @@ def _call_function(name, returner=None, func_args=None):
         to pass to the function.
     :return: Result of the function call
     '''
-    if func_args is None:
-        func_args = []
-    mret = salt.utils.functools.call_function(__salt__[name], *func_args)
+    argspec = salt.utils.args.get_function_argspec(__salt__[name])
+
+    # func_kw is initialized to a dictionary of keyword arguments the function to be run accepts
+    func_kw = dict(zip(argspec.args[-len(argspec.defaults or []):],  # pylint: disable=incompatible-py3-code
+                   argspec.defaults or []))
+
+    # func_args is initialized to a list of positional arguments that the function to be run accepts
+    func_args = argspec.args[:len(argspec.args or []) - len(argspec.defaults or [])]
+    arg_type, kw_to_arg_type, na_type, kw_type = [], {}, {}, False
+    for funcset in reversed(kwargs.get('func_args') or []):
+        if not isinstance(funcset, dict):
+            # We are just receiving a list of args to the function to be run, so just append
+            # those to the arg list that we will pass to the func.
+            arg_type.append(funcset)
+        else:
+            for kwarg_key in six.iterkeys(funcset):
+                # We are going to pass in a keyword argument. The trick here is to make certain
+                # that if we find that in the *args* list that we pass it there and not as a kwarg
+                if kwarg_key in func_args:
+                    kw_to_arg_type[kwarg_key] = funcset[kwarg_key]
+                    continue
+                else:
+                    # Otherwise, we're good and just go ahead and pass the keyword/value pair into
+                    # the kwargs list to be run.
+                    func_kw.update(funcset)
+    arg_type.reverse()
+    for arg in func_args:
+        if arg in kw_to_arg_type:
+            arg_type.append(kw_to_arg_type[arg])
+    _exp_prm = len(argspec.args or []) - len(argspec.defaults or [])
+    _passed_prm = len(arg_type)
+    missing = []
+    if na_type and _exp_prm > _passed_prm:
+        for arg in argspec.args:
+            if arg not in func_kw:
+                missing.append(arg)
+    if missing:
+        raise SaltInvocationError('Missing arguments: {0}'.format(', '.join(missing)))
+    elif _exp_prm > _passed_prm:
+        raise SaltInvocationError('Function expects {0} parameters, got only {1}'.format(
+            _exp_prm, _passed_prm))
+
+    mret = __salt__[name](*arg_type, **func_kw)
     if returner is not None:
         returners = salt.loader.returners(__opts__, __salt__)
         if returner in returners:
diff --git a/tests/unit/states/test_module.py b/tests/unit/states/test_module.py
index 917c7b9430..83c2148641 100644
--- a/tests/unit/states/test_module.py
+++ b/tests/unit/states/test_module.py
@@ -341,12 +341,10 @@ class ModuleStateTest(TestCase, LoaderModuleMockMixin):
         '''
         with patch('salt.utils.args.get_function_argspec', MagicMock(return_value=self.aspec)):
             ret = module._run(CMD)
-        self.assertIn(
-            'The following arguments are missing:',
-            ret['comment']
-        )
-        self.assertIn('world', ret['comment'])
-        self.assertIn('hello', ret['comment'])
+            comment = 'The following arguments are missing:'
+            self.assertIn(comment, ret['comment'])
+            self.assertIn('world', ret['comment'])
+            self.assertIn('hello', ret['comment'])
 
     def test_call_function_named_args(self):
         '''
@@ -356,25 +354,13 @@ class ModuleStateTest(TestCase, LoaderModuleMockMixin):
         '''
         with patch.dict(module.__salt__,
                         {'testfunc': lambda a, b, c, *args, **kwargs: (a, b, c, args, kwargs)}, clear=True):
-            self.assertEqual(
-                module._call_function('testfunc', func_args=[{'a': 1}, {'b': 2}, {'c': 3}]),
-                (1, 2, 3, (), {})
-            )
-            self.assertEqual(
-                module._call_function('testfunc', func_args=[{'c': 3}, {'a': 1}, {'b': 2}]),
-                (1, 2, 3, (), {})
-            )
+            assert module._call_function('testfunc', func_args=[{'a': 1}, {'b': 2}, {'c': 3}]) == (1, 2, 3, (), {})
+            assert module._call_function('testfunc', func_args=[{'c': 3}, {'a': 1}, {'b': 2}]) == (1, 2, 3, (), {})
 
         with patch.dict(module.__salt__,
                         {'testfunc': lambda c, a, b, *args, **kwargs: (a, b, c, args, kwargs)}, clear=True):
-            self.assertEqual(
-                module._call_function('testfunc', func_args=[{'a': 1}, {'b': 2}, {'c': 3}]),
-                (1, 2, 3, (), {})
-            )
-            self.assertEqual(
-                module._call_function('testfunc', func_args=[{'c': 3}, {'a': 1}, {'b': 2}]),
-                (1, 2, 3, (), {})
-            )
+            assert module._call_function('testfunc', func_args=[{'a': 1}, {'b': 2}, {'c': 3}]) == (1, 2, 3, (), {})
+            assert module._call_function('testfunc', func_args=[{'c': 3}, {'a': 1}, {'b': 2}]) == (1, 2, 3, (), {})
 
     def test_call_function_ordered_args(self):
         '''
@@ -384,11 +370,5 @@ class ModuleStateTest(TestCase, LoaderModuleMockMixin):
         '''
         with patch.dict(module.__salt__,
                         {'testfunc': lambda a, b, c, *args, **kwargs: (a, b, c, args, kwargs)}, clear=True):
-            self.assertEqual(
-                module._call_function('testfunc', func_args=[1, 2, 3]),
-                (1, 2, 3, (), {})
-            )
-            self.assertEqual(
-                module._call_function('testfunc', func_args=[3, 1, 2]),
-                (3, 1, 2, (), {})
-            )
+            assert module._call_function('testfunc', func_args=[1, 2, 3]) == (1, 2, 3, (), {})
+            assert module._call_function('testfunc', func_args=[3, 1, 2]) == (3, 1, 2, (), {})
-- 
2.16.4


