From 56e063aeced33cb7bf1b38930439903a752c322b Mon Sep 17 00:00:00 2001
From: Erik Johnson <palehose@gmail.com>
Date: Fri, 9 Mar 2018 15:48:58 -0600
Subject: [PATCH] salt-ssh: fix JSON load of return data when it contains
 non-ascii

For reasons I can't explain, in `salt.utils.json.find_json()` using
`.splitlines()` will sometimes convert a unicode string into a list of
str types on Python 2. So, that's weird. This can be triggered in
salt-ssh whenever there are non-ascii chars in the return data.

[DEBUG] raw = u'{"local": {"return": {"foo": "\xf6\xe4\xfc"}}}'
[DEBUG] raw.splitlines() = ['{"local": {"return": {"foo": "\xc3\xb6\xc3\xa4\xc3\xbc"}}}']

To resolve this, the UnicodeDecodeError is caught and reattempted with a
decoded list.

Additionally, this fixes a performance oversight. We process the string
one line at a time but we are iterating a number of times equal to the
length of the string. This means that we will nearly always end up doing
a bunch of extra list slices resulting in empty lists, which when joined
and loaded will produce ValueErrors, which we are catching and ignoring.
By enumerating over the split string, we ensure that we only iterate at
most a number of times equal to the amount of lines in the string.

Add with_tempfile helper from f9f187e

This helper was part of a PR that did not get ported into the 2018.3.0rc1
branch, but to help with code re-use this commit adds the helper to
2018.3.0rc1.

Add unit test for salt-ssh edge case
---
 salt/utils/json.py            | 18 ++++++++++++++++--
 tests/support/helpers.py      | 21 ++++++++++++++++++++-
 tests/unit/utils/test_json.py | 43 ++++++++++++++++++++-----------------------
 3 files changed, 56 insertions(+), 26 deletions(-)

diff --git a/salt/utils/json.py b/salt/utils/json.py
index 788505cb25..a578b8f843 100644
--- a/salt/utils/json.py
+++ b/salt/utils/json.py
@@ -19,14 +19,28 @@ from salt.ext import six
 log = logging.getLogger(__name__)
 
 
+def __split(raw):
+    '''
+    Performs a splitlines on the string. This function exists to make mocking
+    possible in unit tests, since the member functions of the str/unicode
+    builtins cannot be mocked.
+    '''
+    return raw.splitlines()
+
+
 def find_json(raw):
     '''
     Pass in a raw string and load the json when it starts. This allows for a
     string to start with garbage and end with json but be cleanly loaded
     '''
     ret = {}
-    for ind, _ in enumerate(raw):
-        working = '\n'.join(raw.splitlines()[ind:])
+    lines = __split(raw)
+    for ind, _ in enumerate(lines):
+        try:
+            working = '\n'.join(lines[ind:])
+        except UnicodeDecodeError:
+            working = '\n'.join(salt.utils.data.decode(lines[ind:]))
+
         try:
             ret = json.loads(working)  # future lint: blacklisted-function
         except ValueError:
diff --git a/tests/support/helpers.py b/tests/support/helpers.py
index 05989848b7..5864c83b14 100644
--- a/tests/support/helpers.py
+++ b/tests/support/helpers.py
@@ -24,6 +24,7 @@ import signal
 import socket
 import string
 import sys
+import tempfile
 import threading
 import time
 import tornado.ioloop
@@ -50,7 +51,7 @@ except ImportError:
 # Import Salt Tests Support libs
 from tests.support.unit import skip, _id
 from tests.support.mock import patch
-from tests.support.paths import FILES
+from tests.support.paths import FILES, TMP
 
 log = logging.getLogger(__name__)
 
@@ -954,6 +955,24 @@ def with_system_user_and_group(username, group,
     return decorator
 
 
+def with_tempfile(func):
+    '''
+    Generates a tempfile and cleans it up when test completes.
+    '''
+    @functools.wraps(func)
+    def wrapper(self, *args, **kwargs):
+        fd_, name = tempfile.mkstemp(prefix='__salt.test.', dir=TMP)
+        os.close(fd_)
+        del fd_
+        ret = func(self, name, *args, **kwargs)
+        try:
+            os.remove(name)
+        except Exception:
+            pass
+        return ret
+    return wrapper
+
+
 def requires_system_grains(func):
     '''
     Function decorator which loads and passes the system's grains to the test
diff --git a/tests/unit/utils/test_json.py b/tests/unit/utils/test_json.py
index 12ca1c37a1..20220459a3 100644
--- a/tests/unit/utils/test_json.py
+++ b/tests/unit/utils/test_json.py
@@ -4,37 +4,19 @@ Tests for salt.utils.json
 '''
 # Import Python libs
 from __future__ import absolute_import, print_function, unicode_literals
-import errno
-import functools
-import os
 import textwrap
 
 # Import Salt Testing libs
-from tests.support.paths import TMP
-from tests.support.unit import TestCase, LOREM_IPSUM
+from tests.support.helpers import with_tempfile
+from tests.support.mock import patch, MagicMock, NO_MOCK, NO_MOCK_REASON
+from tests.support.unit import TestCase, LOREM_IPSUM, skipIf
 
 # Import Salt libs
 import salt.utils.files
 import salt.utils.json
+import salt.utils.platform
 import salt.utils.stringutils
-
-
-def with_tempfile(func):
-    '''
-    Generate a temp directory for a test
-    '''
-    @functools.wraps(func)
-    def wrapper(self, *args, **kwargs):
-        temp_file = salt.utils.files.mkstemp(dir=TMP)
-        try:
-            return func(self, temp_file, *args, **kwargs)
-        finally:
-            try:
-                os.remove(temp_file)
-            except OSError as exc:
-                if exc.errno != errno.ENOENT:
-                    raise
-    return wrapper
+from salt.ext import six
 
 
 class JSONTestCase(TestCase):
@@ -113,6 +95,21 @@ class JSONTestCase(TestCase):
         # Test to see if a ValueError is raised if no JSON is passed in
         self.assertRaises(ValueError, salt.utils.json.find_json, LOREM_IPSUM)
 
+    @skipIf(salt.utils.platform.is_windows(), 'skip until we figure out what to do about decoding unicode on windows')
+    @skipIf(not six.PY2, 'Test only needed on Python 2')
+    @skipIf(NO_MOCK, NO_MOCK_REASON)
+    def test_find_json_unicode_splitlines(self):
+        '''
+        Tests a case in salt-ssh where a unicode string is split into a list of
+        str types by .splitlines().
+        '''
+        raw = '{"foo": "öäü"}'
+        mock_split = MagicMock(return_value=[raw.encode('utf8')])
+
+        with patch.object(salt.utils.json, '__split', mock_split):
+            ret = salt.utils.json.find_json(raw)
+            self.assertEqual(ret, {'foo': 'öäü'})
+
     def test_dumps_loads(self):
         '''
         Test dumping to and loading from a string
-- 
2.13.6


